const autoprefixer = require('autoprefixer'),
      webpack = require('webpack'),
      UglifyJsPlugin = require('uglifyjs-webpack-plugin'),
      HTMLWebpackPlugin = require('html-webpack-plugin'),
      MiniCssExtractPlugin = require('mini-css-extract-plugin'),
      CleanWebpackPlugin = require('clean-webpack-plugin'),
      WorkboxPlugin = require('workbox-webpack-plugin'),
      path = require('path');


module.exports = {
  mode: 'production',
  devtool: 'source-map',
  entry: { main: './src/main.js',
           prod: './src/prod.js'},
  resolve: { modules: [path.resolve('src'),
                       path.resolve('node_modules')],
             extensions: ['.js', '.jsx']},
  output: { path: path.resolve('dist'),
            filename: '[name].[hash].js',
            publicPath: ''},
  plugins: [new webpack.optimize.OccurrenceOrderPlugin(),
            new UglifyJsPlugin({ parallel: true, cache: true }),
            new CleanWebpackPlugin(['dist']),
            new MiniCssExtractPlugin({ filename: '[name].[hash].css' }),
            new HTMLWebpackPlugin({ template: path.resolve('public/index.html'), inject: true}),
            new WorkboxPlugin.InjectManifest({ swSrc: './service-worker.js' }),
            // new WorkboxPlugin.GenerateSW({ swDest: 'service-worker.js', clientsClaim: true, skipWaiting: true, })
          ],
  module: {
    rules: [
      { test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: { loader: 'babel-loader',
               options: { cacheDirectory: true}}},
      { test: /\.(css|scss|sass)$/,
        use: [ MiniCssExtractPlugin.loader,
              { loader: 'css-loader',
                options: { sourceMap: false }},
              { loader: 'postcss-loader',
                options: { sourceMap: false,
                plugins: () => [ autoprefixer({
                  browsers: [ '>1%',
                              'last 4 versions',
                              'Firefox ESR',
                              'not ie < 10']})]}},
              { loader: 'sass-loader',
                options: { sourceMap: false }}]},
      { test: /\.(jpe?g|png|gif|ico|svg|woff|woff2|ttf|eot|otf)$/i,
        use: [{ loader: 'file-loader',
                options: { name: '[name].[ext]'}}]}]}};